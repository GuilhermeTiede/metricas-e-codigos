{"version":3,"file":"static/js/676.4c02f448.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport i18n from \"../../translation\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    if (!Object.values(errors).every((e) => e === \"\")) {\r\n      notification[\"error\"]({\r\n        message: i18n.t(\"Atenção\"),\r\n        description: i18n.t(\"Por favor, preencha os campos obrigatórios.\"),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const phone = \"554899743441\"; // número destino\r\n    const messageTemplate = `Olá, meu nome é ${values.name}. Email: ${values.email}. Mensagem: ${values.message}`;\r\n    const encoded = encodeURIComponent(messageTemplate);\r\n    const waUrl = `https://wa.me/${phone}?text=${encoded}`;\r\n\r\n    // Feedback visual rápido antes do redirect\r\n    notification[\"success\"]({\r\n      message: i18n.t(\"Redirecting\"),\r\n      description: i18n.t(\"Opening WhatsApp...\"),\r\n    });\r\n\r\n    // Reset local\r\n    (event.target as HTMLFormElement).reset();\r\n    setFormState(() => ({\r\n      values: { ...initialValues },\r\n      errors: { ...initialValues },\r\n    }));\r\n\r\n    // Redireciona\r\n    window.open(waUrl, \"_blank\");\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\nimport i18n from \"../../translation\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = i18n.t(\"Name is required\");\r\n  }\r\n  if (!values.email) {\r\n    errors.email = i18n.t(\"Email address is required\");\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = i18n.t(\"Email address is invalid\");\r\n  }\r\n  if (!values.message) {\r\n    errors.message = i18n.t(\"Message is required\");\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation, TFunction } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: TFunction;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t, icon }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                gap: \"1.25rem\",\r\n              }}\r\n            >\r\n              {icon && (\r\n                <div style={{ maxWidth: \"180px\" }}>\r\n                  <SvgIcon src={icon} width=\"100%\" height=\"100%\" />\r\n                </div>\r\n              )}\r\n              <Block title={title} content={content} />\r\n            </div>\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\" triggerOnce>\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder={t(\"Your Name\")}\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder={t(\"Your Email\")}\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder={t(\"Your Message\")}\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["initialValues","name","email","message","validate","values","errors","i18n","t","test","Content","styled","Container","TextWrapper","withTranslation","_ref","title","content","_jsxs","children","_jsx","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","icon","handleChange","handleSubmit","formState","setFormState","useState","event","persist","value","target","prevState","async","preventDefault","Object","every","e","notification","description","messageTemplate","waUrl","encodeURIComponent","reset","window","open","useForm","ValidationType","_ref2","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","style","display","flexDirection","gap","maxWidth","SvgIcon","src","width","height","Block","autoComplete","onSubmit","span","Input","TextArea","Button"],"sourceRoot":""}